module AuctionSystem where

import DA.List.Total (minimumBy)

template Auction with
    seller : Party
    description : Text
  where
    ensure description /= ""
    signatory seller

    nonconsuming choice InviteBidder: ContractId AuctionInvitation 
        with buyer: Party
        controller seller
          do create AuctionInvitation with buyer; auction = this

    choice EndAuction : ContractId AuctionResult
      with bidIds: [ContractId Bid]
      controller seller
        do
          bids <- mapA fetch bidIds
          let earliestAndBiggestPrice : Bid -> Bid -> Ordering
              earliestAndBiggestPrice a b = case compare b.offer.price a.offer.price of
                EQ -> compare a.time b.time
                other -> other
              winningBid = minimumBy earliestAndBiggestPrice bids
          create AuctionResult with auction = this; winningBid

template AuctionResult
  with
    auction: Auction
    winningBid: Optional Bid
  where
    signatory auction.seller


template AuctionInvitation
  with
    buyer : Party
    auction: Auction
  where
    signatory auction.seller
    observer buyer

    nonconsuming choice SubmitBid: ContractId Bid
      with offer: Offer
      controller buyer
        do
          now <- getTime
          create Bid with auction; offer; time = now

template Bid
  with
    auction: Auction
    offer: Offer
    time: Time
  where
    signatory offer.party
    observer auction.seller

data Offer = Offer with
  party: Party
  price: Decimal
    deriving (Show, Eq)
