module AuctionSystem where

import DA.List.Total (maximumBy)

comparing : Ord a => (b -> a) -> b -> b -> Ordering
comparing f x y = compare (f x) (f y)

instance Semigroup b => Semigroup (a -> a -> b) where
  (<>) f g = \x y -> f x y <> g x y

type AuctionKey = (Party, Text)

template Auction with
    seller : Party
    description : Text
  where
    ensure description /= ""
    signatory seller

    key (seller, description): AuctionKey
    maintainer key._1

    nonconsuming choice InviteBidder: ContractId AuctionInvitation
        with buyer: Party
        controller seller
          do create AuctionInvitation with buyer; auction = this

    choice EndAuction : ContractId AuctionResult
      with bidIds: [ContractId Bid]
      controller seller
        do
          bids <- filter (\b -> b.auction == this) <$> mapA fetch bidIds
          let desc = flip
              byPrice : Bid -> Decimal
              byPrice b = b.offer.price
              byTime : Bid -> Time
              byTime b = b.time
              winningBid = maximumBy (comparing byPrice <> desc (comparing byTime)) bids
          create AuctionResult with auction = this; winningBid

template AuctionResult
  with
    auction: Auction
    winningBid: Optional Bid
  where
    signatory auction.seller
    observer (optional auction.seller (\b -> b.offer.party) winningBid)

template AuctionInvitation
  with
    buyer : Party
    auction: Auction
  where
    signatory auction.seller
    observer buyer

    nonconsuming choice SubmitBid: ContractId Bid
      with offer: Offer
      controller buyer
        do
          now <- getTime
          create Bid with auction; offer; time = now

template Bid
  with
    auction: Auction
    offer: Offer
    time: Time
  where
    signatory offer.party
    observer auction.seller

data Offer = Offer with
  party: Party
  price: Decimal
    deriving (Show, Eq)
