module Main where

import Daml.Script
import DA.Assert (assertEq)
import DA.Time
import AuctionSystem

zipPadding : [a] -> [b] -> [(a,b)]
zipPadding [] _ = []
zipPadding _ [] = []
zipPadding xs ys =  let xlen = length xs
                        ylen = length ys
                    in
                      if xlen == ylen
                      then xs `zip` ys
                      else if xlen < ylen
                           then zipPadding (take ylen (xs ++ xs))  ys
                           else zipPadding xs (take xlen (ys ++ ys))

-- | Runs generic test for two parties: Alice & Bob
genericAuctionTest : Text        -- ^ auction description
                    -> [Decimal] -- ^ alternate bids for Alice & Bob, e.g. [10.0, 5.0] -> Alice: 10.0, Bob: 5.0
                    -> Script (Optional (Text, Decimal))
genericAuctionTest desc bids = do
  seller <- allocateParty "Seller"
  participants <- mapA allocateParty ["Alice", "Bob"]
  auctionId <- submit seller do
    createCmd Auction with
      seller = seller
      description = desc
  participationIds <- mapA
    (\b -> submit seller do exerciseCmd auctionId InviteBidder with buyer = b)
    participants
  let participationPairs = participants `zip` participationIds
  let bidsData = participationPairs `zipPadding` bids
  allBids <- mapA
    (\d -> do
      _ <- passTime $ minutes 5
      submit d._1._1 do
        exerciseCmd d._1._2 SubmitBid with offer = Offer with party = d._1._1; price = d._2
    )
    bidsData
  resultId <- submit seller do
    -- below, bids are reversed to check
    -- if duplicated bid isn't the winning one
    exerciseCmd auctionId EndAuction with bidIds = reverse allBids
  maybeAuctionResult <- queryContractId seller resultId
  return do
            auctionResult <- maybeAuctionResult
            winningBid <- auctionResult.winningBid
            let offer = winningBid.offer
            return (partyToText offer.party, offer.price)


test_findBestBid : Script ()
test_findBestBid = do
  result <- genericAuctionTest
              "Jacek Malczewski, Vicious Circle"
              [
                10.0 -- Alice
              , 11.0 -- Bob
              , 13.0 -- Alice
              , 13.9 -- Bob
              , 15.0 -- Alice
              , 17.0 -- Bob
              ]
  let expected = Some ("Bob", 17.0)
  assertEq expected result

test_findBestBidWithDuplicatedOffers : Script ()
test_findBestBidWithDuplicatedOffers = do
  result <- genericAuctionTest
              "Jacek Malczewski, Siberian Wigilia"
              [
                9.0  -- Alice
              , 10.0 -- Bob
              , 10.0 -- Alice
              ]
  let expected = (Some ("Bob", 10.0))
  assertEq expected result

test_findBestWithWiredDuplicatedOffers : Script ()
test_findBestWithWiredDuplicatedOffers = do
  result <- genericAuctionTest
              "Jacek Malczewski, Vicious Circle"
              [
                10.0 -- Alice
              , 11.0 -- Bob
              , 14.0 -- Alice
              , 12.9 -- Bob
              , 13.0 -- Alice
              , 14.0 -- Bob
              , 12.0 -- Alice
              ]
  let expected = Some ("Alice", 14.0)
  assertEq expected result


test_noBidsNoResult : Script ()
test_noBidsNoResult = do
  result <- genericAuctionTest
              "Jacek Malczewski, Thanatos"
              []
  let expected = None
  assertEq expected result
